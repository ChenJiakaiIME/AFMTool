""" 
Function to calculate roughness(Ra) of a square region
Inputs- (x,y) coordinate the center of square and L, side length of square, in micrometer. 

Machine-learning algorithm in util/shape_recogniser will give the function the center of the Cu connections for input. 
Side length of square will be set by user

From https://www.olympus-ims.com/en/metrology/surface-roughness-measurement-portal/parameters/#!cms[focus]=007, 
Roughness Average (Ra) is given by average of absolute values of deviation from the mean of a given sample. 
In Numpy's terminology it's Mean Absolute Deviation from mean (https://www.geeksforgeeks.org/absolute-deviation-and-absolute-mean-deviation-using-numpy-python/)
"""

import openpyxl
from openpyxl.utils import get_column_letter

from numpy import mean, absolute

def find_ra(array, detected_circles, is_copper=True):
    """ 
    Returns average roughness of region of copper contact centered at (x,y), 
    with default side length of region = 13 pixels = 1.016 micrometer for copper,
    and 25 pixels for polymer, 
    so that the region extends 6 pixels/12 pixels in each direction from the center piece. 
    
    Coordinates in numpy array generated by pySPM matches orientation of image generated
    """
    #Counter for sum of ra across all detected contacts
    total_ra=0
    circles_count=0
    for pt in detected_circles[0, :]:
        circles_count+=1
        x,y = int(pt[0]*256/768), int(pt[1]*256/768)
        
        range =6 if is_copper else 12
        
        #Define sample area to calculate roughness 
        #used min, max in case selected center is too close to the borders
        #TODO: Record in doc coordinate system 
        sample = array[min((256-y)-range,0):max((256-y)+range+1, 256), min(x-range,0):max(x+range+1, 256)] 
        
        total_ra+=mean(absolute(sample - mean(sample)))
    if(circles_count==0):
        return "Error: No contacts detected"
    return total_ra/circles_count

def insert_ra(excel_file_path, ra, col_num):
    wb = openpyxl.load_workbook(excel_file_path)
    ws = wb["Sheet"]
    
    col_letter = get_column_letter(col_num+1)
    ws[col_letter+'7'] = ra
    
    wb.save(excel_file_path)
    
    return 0
    


